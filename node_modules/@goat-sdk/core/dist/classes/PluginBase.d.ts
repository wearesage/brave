import { Chain } from '../types/Chain.js';
import { ToolBase } from './ToolBase.js';
import { WalletClientBase } from './WalletClientBase.js';
import 'zod';

/**
 * Abstract base class for plugins that provide tools for wallet interactions.
 */
declare abstract class PluginBase<TWalletClient extends WalletClientBase = WalletClientBase> {
    readonly name: string;
    readonly toolProviders: Object[];
    /**
     * Creates a new Plugin instance.
     * @param name - The name of the plugin
     * @param toolProviders - Array of class instances that provide tools
     */
    constructor(name: string, toolProviders: Object[]);
    /**
     * Checks if the plugin supports a specific blockchain.
     * @param chain - The blockchain to check support for
     * @returns True if the chain is supported, false otherwise
     */
    abstract supportsChain(chain: Chain): boolean;
    /**
     * Retrieves the tools provided by the plugin.
     * @param wallet - The wallet client to use for tool execution
     * @returns An array of tools
     */
    getTools(walletClient: TWalletClient): ToolBase[] | Promise<ToolBase[]>;
}

export { PluginBase };
