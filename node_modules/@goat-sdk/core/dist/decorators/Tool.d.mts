import { z } from 'zod';

/**
 * Parameters for the Tool decorator
 * @template TParameters - The Zod schema type for the tool parameters
 */
type ToolDecoratorParams = {
    /**
     * The name of the tool
     * @default snakeCase(methodName)
     */
    name?: string;
    /** A description of what the tool does */
    description: string;
};
type StoredToolMetadata = {
    name: string;
    description: string;
    parameters: {
        index: number;
        schema: z.ZodSchema;
    };
    walletClient?: {
        index: number;
    };
    target: Function;
};
type StoredToolMetadataMap = Map<string, StoredToolMetadata>;
declare const toolMetadataKey: unique symbol;
/**
 * Decorator that marks a class method as a tool accessible to the LLM
 * @param params - Configuration parameters for the tool
 * @returns A decorator function that can be applied to class methods
 *
 * @example
 * class MyToolService {
 *     \@Tool({
 *         description: "Adds two numbers",
 *     })
 *     add({a, b}: AddParameters) {
 *         return a + b;
 *     }
 *}
 */
declare function Tool(params: ToolDecoratorParams): (target: Object, propertyKey: string, descriptor: PropertyDescriptor) => Object;

export { type StoredToolMetadata, type StoredToolMetadataMap, Tool, type ToolDecoratorParams, toolMetadataKey };
